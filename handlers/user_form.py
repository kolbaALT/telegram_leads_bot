from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from handlers.states import LeadForm
from db.db import add_lead
from config import MANAGER_CHAT_ID
from loguru import logger
import re

from keyboards.keyboards import cancel_keyboard, new_lead_keyboard, remove_keyboard

router = Router()

async def check_cancel(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=remove_keyboard)
        return True
    return False

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(LeadForm.waiting_for_name)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")

@router.message(LeadForm.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if await check_cancel(message, state):
        return
    await state.update_data(name=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(LeadForm.waiting_for_phone)

@router.message(LeadForm.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if await check_cancel(message, state):
        return
    phone = message.text.strip()
    if not re.match(r"^\+?\d{10,15}$", phone):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
        return
    await state.update_data(phone=phone)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(LeadForm.waiting_for_request)

@router.message(LeadForm.waiting_for_request)
async def process_request(message: Message, state: FSMContext, bot):
    if await check_cancel(message, state):
        return
    data = await state.get_data()
    name = data["name"]
    phone = data["phone"]
    request_message = message.text

    await add_lead(name, phone, request_message)
    logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç {name} ({phone}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

    notification = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ó–∞–ø—Ä–æ—Å: {request_message}\n"
    )
    await bot.send_message(chat_id=int(MANAGER_CHAT_ID), text=notification)
    logger.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {MANAGER_CHAT_ID}")

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        reply_markup=new_lead_keyboard
    )
    await state.clear()

@router.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")
async def new_lead(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=cancel_keyboard
    )
    await state.set_state(LeadForm.waiting_for_name)
